import os
import gspread
from typing import Optional,Dict
import pandas as pd


str_url=''; dict_result_ggl={}; lst_result_ggl=[]


def make_googlesheets_client(url=None,lang=None):
  global ggl_wrksheet; global str_url; global dict_result_ggl
  global check_count; global col_count; global row_count; global doc_lang
  ggl_wrksheet_list=[]
  str_url=url; doc_lang=lang
  print(str_url)
  if str_url=='':
    return False
  else:
    # READ CREDIDS FROM FILE
    #creds_json = os.path.dirname(__file__) + '/credentials.json'
    creds_json ='credentials.json'
    gc = gspread.service_account(filename= creds_json)
#Check for valid URL !!!
    try:
      sht= gc.open_by_url(str_url)
      ggl_wrksheet=sht.get_worksheet(0)

# CHOICE SHEET IN WORKBOOK !!!!
      if len(sht.worksheets())>2:
        ggl_wrksheet=sht.get_worksheet(1)
        return get_formated_data()
      else:
        return get_formated_data()
    except gspread.exceptions.NoValidUrlKeyFound as e:
      print('Allo', e, type(e))
      return False

def get_size_googlesheets(url=None):
  global ggl_wrksheet; global str_url
  global check_count; global col_count; global row_count
  return [row_count,col_count]

def get_formated_data():
  global str_data; global ggl_wrksheet
  global check_count; global col_count; global row_count
  global lst_result_ggl; global doc_lang
  # locale=ggl_wrksheet.spreadsheet.locale
  # print(locale)
  # dataframe=pd.DataFrame(ggl_wrksheet.get_all_records()) # nisui
  tmp_result=ggl_wrksheet.get_all_values()
  row_count=len(tmp_result); col_count=len(tmp_result[0])
  lst_row=[]
  # print(tmp_result)
  ###row_count=78; col_count=14
  ######lst_result_ggl=[['Level', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'], ['Position', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100', '110', '120', '130', '140', '150', '160', '170', '180', '190', '200', '210', '220', '230', '240', '250', '260', '270', '280', '290', '300', '310', '320', '330', '340', '350', '360', '370', '380', '390', '400', '410', '420', '430', '440', '450', '460', '470', '480', '490', '500', '510', '520', '530', '540', '550', '560', '570', '580', '590', '600', '610', '620', '630', '640', '650', '660', '670', '680', '690', '700', '710', '720', '730', '740', '750', '760'], ['Part Number', 'R-1080616839', 'R-1080618394', 'R-1080629398', 'R-108062984', 'R-108063073', 'R-108063279', 'R-1080634585', 'R-1080636314', 'R-1080636323', 'R-108063648', 'R-108064302', 'R-1080644059', 'R-108064667', 'R-108064726', 'R-108064737', 'R-108064748', 'R-108064782', 'R-108064793', 'R-1080648927', 'R-1080649693', 'R-108065066', 'R-108065136', 'R-108065170', 'R-1080657995', 'R-1080662468', 'R-1080664010', 'R-1080668317', 'R-1080672077', 'R-1080680702', 'R-1080683391', 'R-1080684336', 'R-1080684408', 'R-1080684423', 'R-1080688039', 'R-1080692316', 'R-1080758168', 'R-1081070412', 'R-108107654', 'R-1081960381', 'R-1144059370', 'R-1144059372', 'R-1163010005', 'R-1200986780', 'R-123242712', 'R-123242860', 'R-1232430428', 'R-1232459525', 'R-1232465091', 'R-1232465325', 'R-1250236309', 'R-1250929939', 'R-1250936315', 'R-1250949065', 'R-1250966365', 'R-1250967557', 'R-1250977255', 'R-1250986723', 'R-1360810001', 'R-1360813666', 'R-1360851376', 'R-1360961586', 'R-1361036340', 'R-1361098745', 'R-1412836301', 'R-1420310002', 'R-1512741551', 'R-1512741555', 'R-1512741558', 'R-1512753502', 'R-151500343', 'R-170111780', 'R-170113784', 'R-170117575', 'R-170117933', 'R-170118103', 'R-170118147'], ['Cust. Part number', '1080616839', '1080618394', '1080629398', '108062984', '108063073', '108063279', '1080634585', '1080636314', '1080636323', '108063648', '108064302', '1080644059', '108064667', '108064726', '108064737', '108064748', '108064782', '108064793', '1080648927', '1080649693', '108065066', '108065136', '108065170', '1080657995', '1080662468', '1080664010', '1080668317', '1080672077', '1080680702', '1080683391', '1080684336', '1080684408', '1080684423', '1080688039', '1080692316', '1080758168', '1081070412', '108107654', '1081960381', '1144059370', '1144059372', '1163010005', '1200986780', '123242712', '123242860', '1232430428', '1232459525', '1232465091', '1232465325', '1250236309', '1250929939', '1250936315', '1250949065', '1250966365', '1250967557', '1250977255', '1250986723', '1360810001', '1360813666', '1360851376', '1360961586', '1361036340', '1361098745', '1412836301', '1420310002', '1512741551', '1512741555', '1512741558', '1512753502', '151500343', '170111780', '170113784', '170117575', '170117933', '170118103', '170118147'], ['Description', 'CAP SMT 120 PFD 50VDC 5% NPO', 'CAP SMT X7R 560 10% 50VDCW', 'CAP SMT X7R 0.1 UFd 10% 50V 06', 'CAP SMT 1000 PF50V 10% X7R 060', 'CAP SMT X7R 12000 PFD TOL 10%', 'CAP SMT 82nF 16V X7R', 'CAP SMT 22 NFD 25VD 10% X7R 04', 'CAPACITOR CHIP MULTILAYER CERA', 'CAPACITOR CHIP CHAR X7R 100UFD', 'CAP SMT CHIP X7R 150 NFD 10% 1', 'CAPACITOR CHIP CHAR: X7R 100 P', 'CAP SMT 0.033 UF 16V 10% X7R 0', 'CAP SMT X7R 470 PFD 10% 50V 04', 'CAP 10 PFD TOL: +-0.25PF 50VDC', 'CAP SMT CHIP X7R 10% 50VDCW 0.', 'CAP SMT X7R 10nF 10% 50V 040', 'CAP SMT X7R 1000PFD 10%100V 04', 'CAP SMT CER 1nF 50V 10% X7R 04', 'CAP SMT X7R 220000 PFd 10% 10V', 'CAP SMT X7R 10UFD TOL 10% 10V', 'CAP SMT CER 22pF 50V 5% COG 04', 'CAP SMT CER 33pF 50V 5% COG 04', 'CAP SMT X7R 2200 PFd 10% 50V 0', 'CAPACITOR CHIP CHAR: X7R 2.2UF', 'CAP SMT X7R 2.2UF TOL: 10% 10V', 'CAPACITOR CHIP CHAR: X7R 1.0UF', 'CAP SMT X7R 100 NFD TOL: 10%', 'CAP SMT X7R 4.7UFD TOL: 10% 1', 'CAPACITOR CHIP CHAR: X7R 0.47', 'CAPACITOR CHIP CHAR.: X7R 10UF', 'CAPACITOR CHIP CHAR: X7R 10UFD', 'CAP SMT CHAR.: X7R 100UFD TOL:', 'CAPACITOR CHIP CHAR: X7R 1.0UF', 'CAPACITOR CHIP CHAR X7R 10UFD', 'CAPACITOR CHIP CHAR.: X7R 47UF', 'CAP SMT CHAR: X7R 47UFD TOL 1', 'CAPACITOR CHIP CHAR: NPO 0.004', 'CAP SMT CHAR NPO 1000 PFD', 'SOLID CAP.CHIP 6.3VDC 100UFD T', 'PLUG ASSEMBLY R.ANGLE 8 WAFER', 'PLUG ASSEMBLY R.ANGLE 16 WAFER', 'MINI- HIGH SPEED I/O REC.S', 'CRYSTAL CONTROLLED CLOCK OSC F', 'Ferrite SMT 100MHz 25% 100mA D', 'FERRITE BEADS CHIP EMI FILTER', 'FILTER SMT FERRITE BEADS 180 O', 'CAP SMT 22000PF 16V 20% FILTER', 'FERRITE BEADS CHIP EMI FILTER', 'FILTER EMI SMT FERRITE BEAD 22', 'SHIELDED POWER INDUCTOR CHIP 3', 'IC SMT 3A 50 OHM/100MHZ 0.02', 'INDUCTOR CHIP 5.6UH TOL:20% I/', 'IND SMT 4.7UH TOL: 20% I/DC(TY', 'INDUCTOR CHIP 1.0UH TOL: 20% I', 'COUPLED INDUCTOR 3.3UH TOL.: 2', 'INDUCTOR CHIP 2.2UH TOL: 20% I', 'INDUCTOR CHIP 8.2UH TOL: +/-20', 'RS-485/RS-422 TRANSCEIVER W/IN', 'RS-232 TRANSCEIVER WITH AUTOSH', 'RS-485/RS-422 TRANSCEIVER W/IN', 'SUPERVISORY CIRCUIT 0.405V THR', 'CONFIGURABLE SIX SUPPLY MONITO', 'LOW-VOLTAGE 16-BIT I2C SMBUS I', 'FRACTIONAL-N CLOCK MULTIPLIERH', 'VARIABLE GAIN AMPLIFIER LOW NO', 'DIODE SMT RED 640NM 0603', 'LIGHT EMITTING DIODE SOFT ORAN', 'DIODE SMT YELLOW 591NM 0603', 'LIGHT EMITTING DIODE CHIP GA/A', 'TRAN SMT 150MW 70V SOIC8', 'THICK FILM JUMPER CHIPOHM TOL', 'RESISTOR CHIP THICK FILM 1270', 'RES 2490 1% 0.250W/70C 3.20X1', 'RES SMT 0 OHM 1/4W 5% 1206 3.2', 'RES SMT 10 Ohm 1% 100PPM/C 060', 'RES SMT 0603 1K 1% 1/10W 0.063'], ['Type', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'PF', 'PF', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT', 'SMT'], ['Revision', 't', 'g', 'f', 'e3', 'v', 'h', 'h', 'h', 'cd', 'der', 'jh', 'jh', 'vb', 'fv', 'tf', 'h', 'f', 'fg', 'g', 'vfr', 'Revision', 't', 'y', 't', 'rt', 'y', 't', 'g', 'gtyy', 'yt', 'ty', 'y', 'y', 'y', 'yt', 't', 't', 'uj', 'kji', 'ui', 'y', 't', 't', 't', 'y', 'u', '6', 'ttr', 'r', 're', 'r', 't', 'y', 'u', 'yy', 'tt', 'd', 'd', 'e', 'r', 't', 'yu', 'u', 'i', 'io', 'i', 'o', 'o', 'o', 'u', 'u', 'y', 'y', 'y', 'y', 'w1'], ['I.G', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'SCF', 'TCN', 'TCN', 'SCN', 'SXT', 'SKI', 'SKI', 'SKI', 'SCF', 'SKI', 'SKI', 'SKI', 'SKI', 'SKI', 'SKI', 'SKI', 'SKI', 'SKI', 'SKI', 'SCN', 'SIC', 'SIC', 'SIA', 'SIA', 'SIA', 'SIA', 'SIA', 'SOP', 'SOP', 'SOP', 'SCR', 'STR', 'SCN', 'SRF', 'SRF', 'SRF', 'SRF', 'SRF'], ['Qty', '1', '6', '7', '2', '2', '1', '10', '8', '2', '2', '3', '2', '10', '24', '13', '63', '1', '8', '1', '25', '4', '1', '4', '2', '14', '2', '310', '9', '49', '47', '4', '8', '12', '2', '18', '7', '2', '2', '1', '1', '2', '1', '1', '1', '6', '9', '3', '3', '1', '1', '3', '1', '1', '1', '1', '1', '2', '3', '1', '8', '3', '1', '1', '1', '4', '4', '4', '3', '10', '2', '1', '1', '4', '3', '1', '3'], ['Reference Designation', 'C614', 'C503,C504,C505,C506,C507,C508', 'C147,C550,C551,C631,C632,C700,C702', 'C696,C697', 'C170,C171', 'C83', 'C426,C427,C428,C429,C430,C431,C432,C433,C434,C576', 'C552,C553,C554,C555,C556,C680,C681,C689', 'C436,C437', 'C168,C169', 'C516,C517,C518', 'C191,C192', 'C633,C634,C635,C636,C637,C638,C639,C640,C641,C642', 'C1,C10,C11,C13,C14,C15,C16,C17,C18,C2,C20,C21,C22,C23,C24,C25,C26,C3,C4,C5,C6,C7,C8,C9', 'C435,C618,C619,C620,C621,C622,C623,C624,C625,C626,C627,C628,C630', 'C142,C143,C144,C148,C149,C151,C152,C155,C157,C158,C159,C162,C163,C164,C165', 'C575', 'C590,C591,C592,C594,C596,C598,C599,C617', 'C438', 'C43,C44,C45,C46,C47,C48,C49,C50,C51,C52,C53,C54,C55,C56,C57,C58,C59,C60,C61,C62,C63,C79,C80,C81,C82', 'C583,C584,C585,C586', 'C557', 'C187,C188,C189,C190', 'C183,C611', 'C172,C173,C174,C175,C176,C177,C178,C179,C180,C181,C182,C184,C520,C521', 'C185,C186', 'C100,C101,C102,C103,C104,C105,C106,C110,C111,C112,C113,C114,C115,C116,C117,C118,C119,C120,C121,C122,C123,C124,C125,C126,C127,C128,C129,C130,C133,C134,C135,C137,C138,C139,C140,C141,C150', 'C27,C28,C29,C30,C31,C32,C35,C36,C37', 'C439,C440,C441,C442,C443,C444,C445,C446,C447,C448,C449,C450,C451,C452,C453,C454,C455,C456,C457,C458,C459,C460,C461,C462,C463,C464,C465,C466,C467,C468,C469,C470,C471,C472,C473,C474,C475,C476,C477,C478,C479,C480', 'C145,C146,C38,C39,C40,C41,C487,C488,C489,C490,C491,C492,C493,C494,C495', 'C564,C565,C566,C567', 'C603,C604,C605,C606,C607,C608,C609,C610', 'C510,C511,C512,C513,C514,C515,C519,C559,C560,C561,C562,C563', 'C573,C574', 'C33,C34,C522,C523,C524,C525,C526,C527,C528,C529,C530,C531,C532,C533,C683,C684,C685,C686', 'C577,C578,C580,C581,C582,C589,C735', 'C600,C601', 'C615,C616', 'C509', 'P0', 'P1,P2', 'J1', 'U513', 'FL22', 'FL16,FL17,FL18,FL19,FL27,FL28', 'FL1,FL10,FL14,FL15,FL2,FL3,FL5,FL7,FL8', 'FL11,FL12,FL13', 'FL24,FL25,FL26', 'FL23', 'L12', 'L5,L6,L7', 'L1', 'L13', 'L14', 'L10', 'L11', 'L8,L9', 'U595,U596,U597', 'U562', 'U587,U588,U589,U590,U591,U592,U593,U594', 'U566,U567,U568', 'U565', 'U602', 'U518', 'AR1,AR2,AR3,AR4', 'DS20,DS4,DS5,DS6', 'DS21,DS7,DS8,DS9', 'DS1,DS2,DS3', 'DS10,DS11,DS12,DS13,DS14,DS15,DS16,DS17,DS18,DS19', 'U15,U17', 'R814', 'R1', 'R690,R691,R692,R693', 'R824,R825,R826', 'R812', 'R650,R651,R652'], ['Manufacturer Part No', '(NTU)VITRAMON(NOW VISHAY)#VJ0402A121JXAAT; KYOCERA AVX COMPONENTS#04025A121JAT2A; NOVACAP#0402N121J500NT; VISHAY#VJ0402A121JXAAT;', '(NTU)VITRAMON(NOW VISHAY)#VJ0402Y561KXAAC; KYOCERA AVX COMPONENTS#04025C561KAT2A; KEMET ELECTRONICS#C0402C561K5RACTU; SAMSUNG#CL05B561KB5NNNC; SAMSUNG#CL05B561KBNC; NOVACAP#0402B561K500NT; VISHAY#VJ0402Y561KXAAC;', 'KYOCERA AVX COMPONENTS#06035C104KAT2A; KEMET ELECTRONICS#C0603C104K5RACTU; TDK#C1608X7R1H104K080AA;', '(NTU)VITRAMON(NOW VISHAY)#VJ0603Y102KXAAC; SYFER TECHNOLOGY#0603J0500102KXT; KYOCERA AVX COMPONENTS#06035C102KAT2A T&R; KEMET ELECTRONICS#C0603C102K5RACTU; SAMSUNG#CL10B102KB8NNNE; NOVACAP#0603B102K500NT; VISHAY#VJ0603Y102KXAAC; EUROFARAD#CNC14CS8C1-1.0NF-10%-50V; EXXELIA TECHNOLOGIES#CNC14CS8C1-1.0NF-10%-50V;', '(NTU)VITRAMON(NOW VISHAY)#VJ0603Y123KXAAC; SYFER TECHNOLOGY#0603J0500123KXT; KYOCERA AVX COMPONENTS#06035C123KAT2A T&R; KEMET ELECTRONICS#C0603C123K5RACTU; SAMSUNG#CL10B123KBNC T&R; NOVACAP#0603B123K500NT; VISHAY#VJ0603Y123KXAAC; EUROFARAD#CNC14CS8C1-12NF-10%-50V; EXXELIA TECHNOLOGIES#CNC14CS8C1-12NF-10%-50V;', '(NTU)VITRAMON(NOW VISHAY)#VJ0603Y823KXJAC; KYOCERA AVX COMPONENTS#0603YC823KAT2A T&R; KEMET ELECTRONICS#C0603C823K4RACTU; SAMSUNG#CL10B823KONC T&R; VISHAY#VJ0603Y823KXJAC;', 'KEMET ELECTRONICS#C0402C223K3RACTU; SAMSUNG#CL05B223KA5NNNE; MURATA MANUFACTURING#GRM155R71E223KA61D; CAL CHIP#GMC04X7R223K25NT; CAL CHIP#GMC04X7R223K25NT-LF; NIC#NMC0402X7R223K25TRPF; TDK#C1005X7R1E223K050BB;', 'TDK#C2012X7R1V475K125AC;', 'CAPAX#1210X107K160SNT;', 'SAMSUNG#CL10B154KP8NNNC; KYOCERA AVX COMPONENTS#CM105X7R154K10AT; KYOCERA AVX COMPONENTS#0603ZC154KAT2A; KEMET ELECTRONICS#C0603C154K8RACTU;', 'KYOCERA AVX COMPONENTS#0402YC101KAT2A; KEMET ELECTRONICS#C0402C101K4RACTU; VISHAY#VJ0402Y101KXJAC;', '(NTU)VITRAMON(NOW VISHAY)#VJ0402Y333KXJAT; KYOCERA AVX COMPONENTS#0402YC333KAT2A; KEMET ELECTRONICS#C0402C333K4RACTU; VISHAY#VJ0402Y333KXJAT; NIC#NMC0402X7R333K16TRPLP; NIC#NMC0402X7R333K16TRPLPF;', 'KYOCERA AVX COMPONENTS#04025C471KAT2A; KEMET ELECTRONICS#C0402C471K5RACTU; SAMSUNG#CL05B471KB5NNNE; NOVACAP#0402B471K500NT; VISHAY#VJ0402Y471KXAAT; SAMSUNG#CL05B471KB5NNNC;', '(NTU)VITRAMON(NOW VISHAY)#VJ0402A100CXAT; KYOCERA AVX COMPONENTS#04025A100CAT2A; KEMET ELECTRONICS#C0402C100C5GACTU; SAMSUNG#CL05C100CB5NNNC; VISHAY#VJ0402A100CXAAT;', 'KYOCERA AVX COMPONENTS#04025C473KAT2A; TDK#C1005X7R1H473K050BB; TAIYO YUDEN#UMK105B7473KV-FR; MURATA MANUFACTURING#GRM155R71H473KE14D; CAL CHIP#GMC04X7R473K050NT;', 'KYOCERA AVX COMPONENTS#04025C103KAT2A; KEMET ELECTRONICS#C0402C103K5RACTU; YAGEO#CC0402KPX7R9BB103; VISHAY#VJ0402Y103KAJT; VISHAY#VJ0402Y103KXAAC; CAL CHIP#GMC04X7R103K50NT; CAL CHIP#GMC04X7R103K50NT-LF;', '(NTU)VITRAMON(NOW VISHAY)#VJ0402Y102KXBAT; MURATA MANUFACTURING#GRM155R72A102KA01D; VISHAY#VJ0402Y102KXBAT; CAL CHIP#GMC04X7R102K100NT; YAGEO#CC0402KRX7R0BB102;', 'KYOCERA AVX COMPONENTS#04025C102KAT2A; KEMET ELECTRONICS#C0402C102K5RACTU; SAMSUNG#CL05B102KB5NNNE; SAMSUNG#CL05B102KB5NNNC; VISHAY#VJ0402Y102KXAAT;', 'SAMSUNG#CL05B224KP5NNND; CAL CHIP#GMC04X7R224K10NT; CAL CHIP#GMC04X7R224K10NT-LF; SAMSUNG#CL05B224KP5NNNC; TAIYO YUDEN#LMK105B7224KV-FR; VENKEL#C0402X7R100-224KNP; TDK#C1005X7R1A224K050BB;', 'MURATA MANUFACTURING#GRM21BR71A106KE51L; YAGEO#CC0805KKX7R6BB106; CAL CHIP#GMC21X7R106K10NT; CAL CHIP#GMC21X7R106K10NT-LF; VENKEL#C0805X7R100-106MNE;', 'KYOCERA AVX COMPONENTS#04025A220JAT2A; KEMET ELECTRONICS#C0402C220J5GACTU; SAMSUNG#CL05C220JB5NNNE; VISHAY#VJ0402A220JXAT;', '(NTU)VITRAMON(NOW VISHAY)#VJ0402A330JXAAC; KYOCERA AVX COMPONENTS#04025A330JAT2A; KEMET ELECTRONICS#C0402C330J5GACTU; VISHAY#VJ0402A330JXAAC;', '(NTU)VITRAMON(NOW VISHAY)#VJ0402Y222KXAAC; KYOCERA AVX COMPONENTS#04025C222KAT2A; KEMET ELECTRONICS#C0402C222K5RACTU; SAMSUNG#CL05B222KB5NNNE; NOVACAP#0402B222K500NT; VISHAY#VJ0402Y222KXAAC; SAMSUNG#CL05B222KB5NNNC;', 'MURATA MANUFACTURING#GRM21BR71E225KA73L; VENKEL#C0805X7R250-225KNE; TDK#C2012X7R1E225K125AB; SAMSUNG#CL21B225KAFNNNG; CAL CHIP#GMC21X7R225K25NT; KEMET ELECTRONICS#C0805C225K3RACTU; VISHAY#VJ0805Y225KXXCW1BC;', 'SAMSUNG#CL10B225KP8NNNC; MURATA MANUFACTURING#GRM188R71A225KE15D; YAGEO#CC0603KKX7R6BB225; CAL CHIP#GMC10X7R225K10NT; CAL CHIP#GMC10X7R225K10NTLF; KYOCERA AVX COMPONENTS#0603ZC225KAT2A; KEMET ELECTRONICS#C0603C225K8RACTU; TDK#C1608X7R1A225K080AC;', 'CAL CHIP#GMC04X7R105K10NT; CAL CHIP#GMC04X7R105K10NT-LF;', 'KYOCERA AVX COMPONENTS#04023C104KAT2A; CAL CHIP#GMC04X7R104K25NT; CAL CHIP#GMC04X7R104K25NT-LF; KEMET ELECTRONICS#C0402C104K3RAC7867; SAMSUNG#CL05B104KA5NNNC; TAIYO YUDEN#TMK105B7104KV-FR; VISHAY#VJ0402Y104KXXCW1BC; YAGEO#CC0402KRX7R8BB104;', 'CAL CHIP#GMC10X7R475K10NT; CAL CHIP#GMC10X7R475K10NTLF;', 'CAL CHIP#GMC04X7R474K10NT; CAL CHIP#GMC04X7R474K10NT-LF; TAIYO YUDEN#LMK105B7474KV-F; SAMSUNG#CL05B474KP5NNNC; MURATA MANUFACTURING#GRM155R71A474KE01D; YAGEO#CC0402KRX7R6BB474; SAMSUNG#CL05B474KP5NNNC; MURATA MANUFACTURING#GRM155R71A474KE01D; YAGEO#CC0402KRX7R6BB474;', 'CAPAX#0603X106K160SNT;', 'KEMET ELECTRONICS#C1210C106J3RAC; KEMET ELECTRONICS#C1210C106J3RAC7210; KEMET ELECTRONICS#C1210C106J3RACTU;', 'CAPAX#1206X107M6R3SNT;', 'SAMSUNG#CL10B105KA8NNNC; MURATA MANUFACTURING#GRM188R71E105KA12D; CAL CHIP#GMC10X7R105K25NT; CAL CHIP#GMC10X7R105K25NTLF;', 'SAMSUNG#CL21B106KOQNNNG; CAL CHIP#GMC21X7R106K16NT; CAL CHIP#GMC21X7R106K16NTLF; TAIYO YUDEN#EMK212BB7106KG-T; VENKEL#C0805X7R160-106KNE;', 'CAPAX#1206X476K160SNT;', 'MURATA MANUFACTURING#GRM32ER70J476KE20L; TAIYO YUDEN#JMK325B7476KM-PR; KEMET ELECTRONICS#C1210C476K9RACTU;', 'KEMET ELECTRONICS#C0603C472F3GACTU;', 'KYOCERA AVX COMPONENTS#06035A102FAT2A; KEMET ELECTRONICS#C0603C102F5GACTU; NIC#NMC0603NPO102F50TRPF;', 'KEMET ELECTRONICS#T520B107M006ATE015;', 'TE CONNECTIVITY#1410189-3;', 'TE CONNECTIVITY#1410187-3;', 'SAMTEC#MHDMR-19-02-H-TH-L-TR;', 'ECLIPTEK#EH4625ETTTS-54.000MTR;', 'MURATA MANUFACTURING#BLM18AG102SN1D;', 'MURATA MANUFACTURING#BLM18AG121SH1D;', 'MURATA MANUFACTURING#BLM18PG181SN1D;', 'MURATA MANUFACTURING#NFM18CC223R1C3D;', 'MURATA MANUFACTURING#BLM18AG601SN1D;', 'MURATA MANUFACTURING#BLM15EG221SN1D;', 'COILCRAFT#XAL4030-332MSC;', 'MURATA MANUFACTURING#BLM31PG500SN1L;', 'VISHAY#IHLP2020CZER5R6M11;', 'VISHAY#IHLP4040DZER4R7M01;', 'VISHAY#IHLP1616ABER1R0M11;', 'COILCRAFT#MSD7342-332MSC; COILCRAFT#MSD7342-332MSB;', 'VISHAY#IHLP2020CZER2R2M11;', 'VISHAY#IHLP2525BDER8R2M01;', 'LINEAR TECHNOLOGY#LTC2855HDE#TRPBF; ANALOG DEVICES#LTC2855HDE#TR; ANALOG DEVICES#LTC2855HDE#TRPBF;', 'MAXIM INTEGRATED PRODUCTS#MAX3221EUE+T; MAXIM INTEGRATED PRODUCTS#MAX3221EUE-T;', 'LINEAR TECHNOLOGY#LTC2854IDD#PBF; LINEAR TECHNOLOGY#LTC2854IDD#TRPBF;', 'TEXAS INSTRUMENTS#TPS3808G01DRVT;', 'LINEAR TECHNOLOGY#LTC2930IDD#TRPBF;', 'TEXAS INSTRUMENTS#TCA6416ARTWR;', 'CIRRUS LOGIC#CS2100CP-DZZ;', 'ANALOG DEVICES#AD8337BCPZ-R2; ANALOG DEVICES#AD8337BCPZ-WP; ANALOG DEVICES#AD8337BCPZ-REEL7;', 'VISHAY#TLMS1000-GS08; OSRAM#LSL29K-G1H2-1;', 'VISHAY#TLMO1000-GS08; OSRAM#LOL29K-H2K1-24;', 'VISHAY#TLMY1000-GS08; OSRAM#LYL29K-H1J2-26;', 'KINGBRIGHT#APHHS1005CGCK; KINGBRIGHT#KPHHS-1005CGCK;', 'QT OPTO#MOCD213-M T&R; ON SEMICONDUCTOR#MOCD213 T&R; ON SEMICONDUCTOR#MOCD213M T&R; ON SEMICONDUCTOR#MOCD213R1M; ON SEMICONDUCTOR#MOCD213R1M T&R; ON SEMICONDUCTOR#MOCD213R2M; ON SEMICONDUCTOR#MOCD213R2VM;', 'VISHAY#CRCW08050000Z0EA; VISHAY#CRCW08050000ZSTA; VISHAY#CRCW08055-ZEROOHM;', 'VISHAY#CRCW0805-1271-F-RT2 T&R; VISHAY#CRCW08051K27FKEA; VISHAY#CRCW08051K27FKTA;', 'SAMSUNG#RC3216F2491CS; ROHM SEMICONDUCTOR#MCR18EZHF-2K49 T&R; YAGEO#RC1206FR-072K49; YAGEO#RC1206FR-072K49L; BOURNS#CR1206-FX-2K49-E T&R; BOURNS#CR1206-FX-2K49ELF; VISHAY#CRCW12062K49FKTA; VISHAY#CRCW12062K49FKEA;', 'YAGEO#RC1206JR-070RL; VISHAY#CRCW-1206-000RT1 T&R;', 'SAMSUNG#RC1608F10R0CS; BOURNS#CR0603-FX-10R0-E T&R; BOURNS#CR0603-FX-10R0ELF; VISHAY#CRCW060310R0FKEA; VISHAY#CRCW060310R0FKTA;', 'SAMSUNG#RC1608F1001CS; SAMSUNG#RC1608F1001CS T&R; YAGEO#RC0603FR-071KL; BOURNS#CR0603-FX-1001-E T&R; BOURNS#CR0603-FX-1001ELF; VISHAY#CRCW06031K00FKEA; VISHAY#CRCW06031K00FKTA;'], ['Shape type', '402', '0.040X0.020X', '603', '603', '', '603', '402', '', '1210', '', '', '0.040X0.030X', '402', '0.04X0.03X0.', '402', '402', '402', '402', '402', '0.080X0.0501', '402', '402', '402', '', '603', '402', '', '', '402', '', '', '', '', '805', '1206', '', '', '', '3.5X2.8X1.9M', '', '', '', '', '603', '', '603', '603', '', '402', '', '1206', '', '', '', '', '', '', 'DFN', 'TSSOP', 'DFN', 'SON', 'DFN', 'WQFN', 'MSOP', 'LFCSP', '603', '', '603', '402', 'SO', '', '', '', '1206', '603', '603'], ['pur/man', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'], ['Sticker', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']]
   ########
  # From Row -Row to Column design
  lst_result_ggl=[]
  if doc_lang=='English':
    i=0
    while i <col_count:
      ind_sublist=0; lst_row=[]
      while ind_sublist<row_count-1:
        lst_row.append(tmp_result[ind_sublist][i])
        ind_sublist+=1
      lst_result_ggl.append(lst_row)
      i+=1
    # print(lst_result_ggl)
  if doc_lang=='Hebrew':
    i=col_count-1
    while i >=0:
      ind_sublist=0; lst_row=[]
      while ind_sublist<row_count-1:
        lst_row.append(tmp_result[ind_sublist][i])
        ind_sublist+=1
      lst_result_ggl.append(lst_row)
      i-=1
    # i=col_count-1
    # while i >0:
    #   ind_sublist=row_count-1; lst_row=[]
    #   while ind_sublist>0:
    #     lst_row.append(tmp_result[i][ind_sublist])
    #     ind_sublist-=1
    #   lst_result_ggl.append(lst_row)
    #   i-=1
    # print(lst_result_ggl)
   ######

  return True

def read_from_googlesheets(row: int=None, column:int=None):
  global str_data; global dict_result_ggl; global dataframe; global ggl_wrksheet
  global str_url; global lst_result_ggl
  global check_count; global col_count; global row_count
  check_count=0
  # Get All Table
  if row==None and column==None:
    return [lst_result_ggl,check_count]
 # Get row from Table
  elif row!=None and column==None:
    lst_res_row=[]; check_count=+1; n=col_count-1
    for i in range(0,n):
      lst_res_row.append([ lst_result_ggl[i][0],lst_result_ggl[i][row-1] ] )
    print(lst_res_row)
    return [lst_res_row ,check_count]
  # Get Column from Table
  elif row==None and column!=None:
    check_count=+2
    return [lst_result_ggl[column],check_count]
    # get cell from Table
  else:
    check_count=+3 
    return [lst_result_ggl[column-1][row] , check_count]
